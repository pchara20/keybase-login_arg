// Generated by IcedCoffeeScript 110.0.0
(function() {
  var iced, login, make_esc, parse_email_or_username, read;

  iced = require('iced-runtime-3');

  read = require('read');

  login = require('../').login;

  make_esc = require('iced-error').make_esc;

  parse_email_or_username = function(email_or_username) {
    if (email_or_username.indexOf('@') > 0) {
      return {
        email: email_or_username
      };
    } else {
      return {
        username: email_or_username
      };
    }
  };

  exports.cmd = function(cb) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var email, email_or_username, err, esc, passphrase, res, username;
      return function*() {
        var __iced_deferrals, __iced_deferrals1, __iced_deferrals2, ref;
        esc = make_esc(cb, "main");
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: exports>",
          filename: "/Users/max/src/keybase/node-login/src/cmd.iced"
        });
        read({
          prompt: "email or username> "
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return email_or_username = arguments[0];
            };
          })(),
          lineno: 10
        })));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        ref = parse_email_or_username(email_or_username), username = ref.username, email = ref.email;
        __iced_deferrals1 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: exports>",
          filename: "/Users/max/src/keybase/node-login/src/cmd.iced"
        });
        read({
          prompt: "passphrase> ",
          silent: true
        }, esc(__iced_deferrals1.defer({
          assign_fn: (function() {
            return function() {
              return passphrase = arguments[0];
            };
          })(),
          lineno: 12
        })));
        if (__iced_deferrals1.await_exit()) {
          yield;
        }
        __iced_deferrals2 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: exports>",
          filename: "/Users/max/src/keybase/node-login/src/cmd.iced"
        });
        login({
          username: username,
          email: email,
          passphrase: passphrase
        }, __iced_deferrals2.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return res = arguments[1];
            };
          })(),
          lineno: 13
        }));
        if (__iced_deferrals2.await_exit()) {
          yield;
        }
        return cb(err, res);
      };
    })(this)();
    return __iced_it.next();
  };

}).call(this);
